#include <stdio.h>
#include <stdlib.h>

#define MAX 9

// Estruturas de Dados Estáticas
typedef struct {
    int data[MAX];
    int size;
} StaticList;

typedef struct {
    int data[MAX];
    int top;
} StaticStack;

typedef struct {
    int data[MAX];
    int front, rear;
} StaticQueue;

// Estruturas de Dados Dinâmicas
typedef struct DynamicNode {
    int data;
    struct DynamicNode* next;
} DynamicNode;

typedef struct {
    DynamicNode* head;
} DynamicList;

typedef struct {
    DynamicNode* top;
} DynamicStack;

typedef struct {
    DynamicNode* front;
    DynamicNode* rear;
} DynamicQueue;

// Funções para Lista Estática
void initStaticList(StaticList* list) {
    list->size = 0;
}

void addStaticList(StaticList* list, int value) {
    if (list->size < MAX) {
        list->data[list->size++] = value;
    } else {
        printf("Lista estática cheia!\n");
    }
}

void removeStaticList(StaticList* list, int value) {
    int i;
    for (i = 0; i < list->size; i++) {
        if (list->data[i] == value) {
            for (int j = i; j < list->size - 1; j++) {
                list->data[j] = list->data[j + 1];
            }
            list->size--;
            return;
        }
    }
    printf("Elemento não encontrado na lista estática!\n");
}

int searchStaticList(StaticList* list, int value) {
    for (int i = 0; i < list->size; i++) {
        if (list->data[i] == value) {
            return i;
        }
    }
    return -1;
}

void printStaticList(StaticList* list) {
    printf("Lista Estática: ");
    for (int i = 0; i < list->size; i++) {
        printf("%d ", list->data[i]);
    }
    printf("\n");
}

// Funções para Pilha Estática
void initStaticStack(StaticStack* stack) {
    stack->top = -1;
}

void pushStaticStack(StaticStack* stack, int value) {
    if (stack->top < MAX - 1) {
        stack->data[++stack->top] = value;
    } else {
        printf("Pilha estática cheia!\n");
    }
}

void popStaticStack(StaticStack* stack) {
    if (stack->top >= 0) {
        stack->top--;
    } else {
        printf("Pilha estática vazia!\n");
    }
}

void printStaticStack(StaticStack* stack) {
    printf("Pilha Estática: ");
    for (int i = 0; i <= stack->top; i++) {
        printf("%d ", stack->data[i]);
    }
    printf("\n");
}

// Funções para Fila Estática
void initStaticQueue(StaticQueue* queue) {
    queue->front = 0;
    queue->rear = -1;
}

void enqueueStaticQueue(StaticQueue* queue, int value) {
    if (queue->rear < MAX - 1) {
        queue->data[++queue->rear] = value;
    } else {
        printf("Fila estática cheia!\n");
    }
}

void dequeueStaticQueue(StaticQueue* queue) {
    if (queue->rear >= queue->front) {
        queue->front++;
    } else {
        printf("Fila estática vazia!\n");
    }
}

void printStaticQueue(StaticQueue* queue) {
    printf("Fila Estática: ");
    for (int i = queue->front; i <= queue->rear; i++) {
        printf("%d ", queue->data[i]);
    }
    printf("\n");
}

// Funções para Lista Dinâmica
void initDynamicList(DynamicList* list) {
    list->head = NULL;
}

void addDynamicList(DynamicList* list, int value) {
    DynamicNode* newNode = (DynamicNode*)malloc(sizeof(DynamicNode));
    newNode->data = value;
    newNode->next = list->head;
    list->head = newNode;
}

void removeDynamicList(DynamicList* list, int value) {
    DynamicNode* current = list->head;
    DynamicNode* previous = NULL;
    while (current != NULL) {
        if (current->data == value) {
            if (previous == NULL) {
                list->head = current->next;
            } else {
                previous->next = current->next;
            }
            free(current);
            return;
        }
        previous = current;
        current = current->next;
    }
    printf("Elemento não encontrado na lista dinâmica!\n");
}

int searchDynamicList(DynamicList* list, int value) {
    DynamicNode* current = list->head;
    int index = 0;
    while (current != NULL) {
        if (current->data == value) {
            return index;
        }
        index++;
        current = current->next;
    }
    return -1;
}

void printDynamicList(DynamicList* list) {
    printf("Lista Dinâmica: ");
    DynamicNode* current = list->head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Funções para Pilha Dinâmica
void initDynamicStack(DynamicStack* stack) {
    stack->top = NULL;
}

void pushDynamicStack(DynamicStack* stack, int value) {
    DynamicNode* newNode = (DynamicNode*)malloc(sizeof(DynamicNode));
    newNode->data = value;
    newNode->next = stack->top;
    stack->top = newNode;
}

void popDynamicStack(DynamicStack* stack) {
    if (stack->top != NULL) {
        DynamicNode* temp = stack->top;
        stack->top = stack->top->next;
        free(temp);
    } else {
        printf("Pilha dinâmica vazia!\n");
    }
}

void printDynamicStack(DynamicStack* stack) {
    printf("Pilha Dinâmica: ");
    DynamicNode* current = stack->top;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Funções para Fila Dinâmica
void initDynamicQueue(DynamicQueue* queue) {
    queue->front = queue->rear = NULL;
}

void enqueueDynamicQueue(DynamicQueue* queue, int value) {
    DynamicNode* newNode = (DynamicNode*)malloc(sizeof(DynamicNode));
    newNode->data = value;
    newNode->next = NULL;
    if (queue->rear == NULL) {
        queue->front = queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}

void dequeueDynamicQueue(DynamicQueue* queue) {
    if (queue->front != NULL) {
        DynamicNode* temp = queue->front;
        queue->front = queue->front->next;
        if (queue->front == NULL) {
            queue->rear = NULL;
        }
        free(temp);
    } else {
        printf("Fila dinâmica vazia!\n");
    }
}

void printDynamicQueue(DynamicQueue* queue) {
    printf("Fila Dinâmica: ");
    DynamicNode* current = queue->front;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Menu Interativo
void menu() {
    int choice, type, value;
    StaticList slist;
    StaticStack sstack;
    StaticQueue squeue;
    DynamicList dlist;
    DynamicStack dstack;
    DynamicQueue dqueue;

    initStaticList(&slist);
    initStaticStack(&sstack);
    initStaticQueue(&squeue);
    initDynamicList(&dlist);
    initDynamicStack(&dstack);
    initDynamicQueue(&dqueue);

    while (1) {
        printf("\nEscolha a Estrutura de Dados:\n");
        printf("1. Lista\n2. Pilha\n3. Fila\n4. Sair\n");
        printf("Escolha: ");
        scanf("%d", &choice);

        if (choice == 4) break;

        printf("\nEscolha o Tipo:\n");
        printf("1. Estática\n2. Dinâmica\n");
        printf("Escolha: ");
        scanf("%d", &type);

        switch (choice) {
            case 1: // Lista
                if (type == 1) {
                    printf("Operação na Lista Estática:\n");
                    printf("1. Adicionar\n2. Remover\n3. Buscar\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                        printf("Valor para adicionar: ");
                        scanf("%d", &value);
                        addStaticList(&slist, value);
                        printStaticList(&slist);
                    } else if (choice == 2) {
                        printf("Valor para remover: ");
                        scanf("%d", &value);
                        removeStaticList(&slist, value);
                        printStaticList(&slist);
                    } else if (choice == 3) {
                        printf("Valor para buscar: ");
                        scanf("%d", &value);
                        int pos = searchStaticList(&slist, value);
                        if (pos != -1)
                            printf("Encontrado na posição: %d\n", pos);
                        else
                            printf("Valor não encontrado.\n");
                    }
                } else {
                    // Lista Dinâmica
                    printf("Operação na Lista Dinâmica:\n");
                    printf("1. Adicionar\n2. Remover\n3. Buscar\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                        printf("Valor para adicionar: ");
                        scanf("%d", &value);
                        addDynamicList(&dlist, value);
                        printDynamicList(&dlist);
                    } else if (choice == 2) {
                        printf("Valor para remover: ");
                        scanf("%d", &value);
                        removeDynamicList(&dlist, value);
                        printDynamicList(&dlist);
                    } else if (choice == 3) {
                        printf("Valor para buscar: ");
                        scanf("%d", &value);
                        int pos = searchDynamicList(&dlist, value);
                        if (pos != -1)
                            printf("Encontrado na posição: %d\n", pos);
                        else
                            printf("Valor não encontrado.\n");
                    }
                }
                break;

            case 2: // Pilha
                if (type == 1) {
                    // Pilha Estática
                    printf("Operação na Pilha Estática:\n");
                    printf("1. Push\n2. Pop\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                        printf("Valor para empilhar: ");
                        scanf("%d", &value);
                        pushStaticStack(&sstack, value);
                        printStaticStack(&sstack);
                    } else if (choice == 2) {
                        popStaticStack(&sstack);
                        printStaticStack(&sstack);
                    }
                } else {
                    // Pilha Dinâmica
                    printf("Operação na Pilha Dinâmica:\n");
                    printf("1. Push\n2. Pop\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                        printf("Valor para empilhar: ");
                        scanf("%d", &value);
                        pushDynamicStack(&dstack, value);
                        printDynamicStack(&dstack);
                    } else if (choice == 2) {
                        popDynamicStack(&dstack);
                        printDynamicStack(&dstack);
                    }
                }
                break;

            case 3: // Fila
                if (type == 1) {
                    // Fila Estática
                    printf("Operação na Fila Estática:\n");
                    printf("1. Enqueue\n2. Dequeue\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                        printf("Valor para enfileirar: ");
                        scanf("%d", &value);
                        enqueueStaticQueue(&squeue, value);
                        printStaticQueue(&squeue);
                    } else if (choice == 2) {
                        dequeueStaticQueue(&squeue);
                        printStaticQueue(&squeue);
                    }
                } else {
                    // Fila Dinâmica
                    printf("Operação na Fila Dinâmica:\n");
                    printf("1. Enqueue\n2. Dequeue\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                        printf("Valor para enfileirar: ");
                        scanf("%d", &value);
                        enqueueDynamicQueue(&dqueue, value);
                        printDynamicQueue(&dqueue);
                    } else if (choice == 2) {
                        dequeueDynamicQueue(&dqueue);
                        printDynamicQueue(&dqueue);
                    }
                }
                break;

            default:
                printf("Opção inválida!\n");
        }
    }
}

int main() {
    menu();
    return 0;
}
